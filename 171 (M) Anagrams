/*
Given an array of strings, return all groups of strings that are anagrams.

Have you met this question in a real interview? Yes
Example
Given ["lint", "intl", "inlt", "code"], return ["lint", "inlt", "intl"].

Given ["ab", "ba", "cd", "dc", "e"], return ["ab", "ba", "cd", "dc"].

Note
All inputs will be in lower-case

Tags Expand 
String Hash Table


Related Problems Expand 
Easy Two Strings Are Anagrams
*/

//codes start from here
public class Solution {
    /**
     * @param strs: A list of strings
     * @return: A list of strings
     */
    public List<String> anagrams(String[] strs) {
        // write your code here
        if (strs == null || strs.length == 0) {
            return new ArrayList<String>();
        }
        List<String> results = new ArrayList<String>();
        Map<String, ArrayList<String>> myMap = new HashMap<String, ArrayList<String>>();
        for (String s : strs) {
            String sPlus = reorder(s);
            if (!myMap.containsKey(sPlus)) {
                myMap.put(sPlus, new ArrayList<String>());
            }
            myMap.get(sPlus).add(s);
        }
        for (String s : myMap.keySet()) {
            if (myMap.get(s).size() > 1) {
                results.addAll(myMap.get(s));
            }
        }
        return results;
    }
    
    private String reorder(String s) {
        StringBuilder sb = new StringBuilder();
        int[] count = new int[26];
        for (int i = 0; i < s.length(); ++i) {
            count[s.charAt(i)-'a']++;
        }
        for (int i = 0; i < 26; ++i) {
            for (int j = 0; j < count[i]; ++j) {
                sb.append((char)('a'+i));
            }
        }
        return sb.toString();
    }
}
